//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     GenAPI Version: 7.0.8.6004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Avalonia
{
    public static partial class Direct2DApplicationExtensions
    {
        public static Avalonia.AppBuilder UseDirect2D1(this Avalonia.AppBuilder builder) { throw null; }
    }
}
namespace Avalonia.Direct2D1
{
    public partial class Direct2D1Platform : Avalonia.Platform.IPlatformRenderInterface
    {
        public Direct2D1Platform() { }
        public Avalonia.Platform.AlphaFormat DefaultAlphaFormat { get { throw null; } }
        public Avalonia.Platform.PixelFormat DefaultPixelFormat { get { throw null; } }
        public static SharpDX.Direct2D1.Device Direct2D1Device { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public static SharpDX.Direct2D1.Factory1 Direct2D1Factory { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public static SharpDX.Direct3D11.Device Direct3D11Device { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public static SharpDX.DirectWrite.Factory1 DirectWriteFactory { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public static SharpDX.DXGI.Device1 DxgiDevice { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public static SharpDX.WIC.ImagingFactory ImagingFactory { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public bool SupportsIndividualRoundRects { get { throw null; } }
        public Avalonia.Platform.IGeometryImpl BuildGlyphRunGeometry(Avalonia.Media.GlyphRun glyphRun) { throw null; }
        public Avalonia.Platform.IPlatformRenderInterfaceContext CreateBackendContext(Avalonia.Platform.IPlatformGraphicsContext graphicsContext) { throw null; }
        public Avalonia.Platform.IGeometryImpl CreateCombinedGeometry(Avalonia.Media.GeometryCombineMode combineMode, Avalonia.Media.Geometry g1, Avalonia.Media.Geometry g2) { throw null; }
        public Avalonia.Platform.IGeometryImpl CreateEllipseGeometry(Avalonia.Rect rect) { throw null; }
        public Avalonia.Platform.IGeometryImpl CreateGeometryGroup(Avalonia.Media.FillRule fillRule, System.Collections.Generic.IReadOnlyList<Avalonia.Media.Geometry> children) { throw null; }
        public Avalonia.Platform.IGlyphRunImpl CreateGlyphRun(Avalonia.Media.IGlyphTypeface glyphTypeface, double fontRenderingEmSize, System.Collections.Generic.IReadOnlyList<Avalonia.Media.TextFormatting.GlyphInfo> glyphInfos, Avalonia.Point baselineOrigin) { throw null; }
        public Avalonia.Platform.IGeometryImpl CreateLineGeometry(Avalonia.Point p1, Avalonia.Point p2) { throw null; }
        public Avalonia.Platform.IGeometryImpl CreateRectangleGeometry(Avalonia.Rect rect) { throw null; }
        public Avalonia.Platform.IRenderTargetBitmapImpl CreateRenderTargetBitmap(Avalonia.PixelSize size, Avalonia.Vector dpi) { throw null; }
        public Avalonia.Platform.IStreamGeometryImpl CreateStreamGeometry() { throw null; }
        public Avalonia.Platform.IWriteableBitmapImpl CreateWriteableBitmap(Avalonia.PixelSize size, Avalonia.Vector dpi, Avalonia.Platform.PixelFormat format, Avalonia.Platform.AlphaFormat alphaFormat) { throw null; }
        public static void Initialize() { }
        public bool IsSupportedBitmapPixelFormat(Avalonia.Platform.PixelFormat format) { throw null; }
        public Avalonia.Platform.IBitmapImpl LoadBitmap(Avalonia.Platform.PixelFormat format, Avalonia.Platform.AlphaFormat alphaFormat, System.IntPtr data, Avalonia.PixelSize size, Avalonia.Vector dpi, int stride) { throw null; }
        public Avalonia.Platform.IBitmapImpl LoadBitmap(System.IO.Stream stream) { throw null; }
        public Avalonia.Platform.IBitmapImpl LoadBitmap(string fileName) { throw null; }
        public Avalonia.Platform.IBitmapImpl LoadBitmapToHeight(System.IO.Stream stream, int height, Avalonia.Media.Imaging.BitmapInterpolationMode interpolationMode = Avalonia.Media.Imaging.BitmapInterpolationMode.HighQuality) { throw null; }
        public Avalonia.Platform.IBitmapImpl LoadBitmapToWidth(System.IO.Stream stream, int width, Avalonia.Media.Imaging.BitmapInterpolationMode interpolationMode = Avalonia.Media.Imaging.BitmapInterpolationMode.HighQuality) { throw null; }
        public Avalonia.Platform.IWriteableBitmapImpl LoadWriteableBitmap(System.IO.Stream stream) { throw null; }
        public Avalonia.Platform.IWriteableBitmapImpl LoadWriteableBitmap(string fileName) { throw null; }
        public Avalonia.Platform.IWriteableBitmapImpl LoadWriteableBitmapToHeight(System.IO.Stream stream, int height, Avalonia.Media.Imaging.BitmapInterpolationMode interpolationMode = Avalonia.Media.Imaging.BitmapInterpolationMode.HighQuality) { throw null; }
        public Avalonia.Platform.IWriteableBitmapImpl LoadWriteableBitmapToWidth(System.IO.Stream stream, int width, Avalonia.Media.Imaging.BitmapInterpolationMode interpolationMode = Avalonia.Media.Imaging.BitmapInterpolationMode.HighQuality) { throw null; }
        public Avalonia.Platform.IBitmapImpl ResizeBitmap(Avalonia.Platform.IBitmapImpl bitmapImpl, Avalonia.PixelSize destinationSize, Avalonia.Media.Imaging.BitmapInterpolationMode interpolationMode = Avalonia.Media.Imaging.BitmapInterpolationMode.HighQuality) { throw null; }
    }
    public partial class Disposable<T> : System.IDisposable where T : System.IDisposable
    {
        public Disposable(T inner) { }
        public Disposable(T inner, System.IDisposable extra) { }
        public T Inner { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public void Dispose() { }
        public static implicit operator T (Avalonia.Direct2D1.Disposable<T> i) { throw null; }
    }
    public partial interface IExternalDirect2DRenderTargetSurface
    {
        void AfterDrawing();
        void BeforeDrawing();
        void DestroyRenderTarget();
        SharpDX.Direct2D1.RenderTarget GetOrCreateRenderTarget();
    }
    public partial interface ILayerFactory
    {
        Avalonia.Platform.IDrawingContextLayerImpl CreateLayer(Avalonia.Size size);
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct OptionalDispose<T> : System.IDisposable, System.IEquatable<Avalonia.Direct2D1.OptionalDispose<T>> where T : System.IDisposable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private readonly T _Value_k__BackingField;
        private readonly int _dummyPrimitive;
        public OptionalDispose(T value, bool dispose) { throw null; }
        public T Value { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public void Dispose() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public bool Equals(Avalonia.Direct2D1.OptionalDispose<T> other) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static bool operator ==(Avalonia.Direct2D1.OptionalDispose<T> left, Avalonia.Direct2D1.OptionalDispose<T> right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static bool operator !=(Avalonia.Direct2D1.OptionalDispose<T> left, Avalonia.Direct2D1.OptionalDispose<T> right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public override string ToString() { throw null; }
    }
    public static partial class PrimitiveExtensions
    {
        public static readonly SharpDX.Mathematics.Interop.RawMatrix3x2 Matrix3x2Identity;
        public static readonly SharpDX.Mathematics.Interop.RawRectangleF RectangleInfinite;
        public const float ZeroTolerance = 1E-06f;
        public static Avalonia.Matrix ToAvalonia(this SharpDX.Mathematics.Interop.RawMatrix3x2 matrix) { throw null; }
        public static Avalonia.Rect ToAvalonia(this SharpDX.Mathematics.Interop.RawRectangleF r) { throw null; }
        public static Avalonia.PixelSize ToAvalonia(this SharpDX.Size2 p) { throw null; }
        public static Avalonia.Vector ToAvaloniaVector(this SharpDX.Size2F p) { throw null; }
        public static SharpDX.Mathematics.Interop.RawMatrix3x2 ToDirect2D(this Avalonia.Matrix matrix) { throw null; }
        public static SharpDX.Mathematics.Interop.RawColor4 ToDirect2D(this Avalonia.Media.Color color) { throw null; }
        public static SharpDX.Direct2D1.ExtendMode ToDirect2D(this Avalonia.Media.GradientSpreadMethod spreadMethod) { throw null; }
        public static SharpDX.Direct2D1.CapStyle ToDirect2D(this Avalonia.Media.PenLineCap lineCap) { throw null; }
        public static SharpDX.Direct2D1.LineJoin ToDirect2D(this Avalonia.Media.PenLineJoin lineJoin) { throw null; }
        public static SharpDX.DirectWrite.TextAlignment ToDirect2D(this Avalonia.Media.TextAlignment alignment) { throw null; }
        public static SharpDX.Mathematics.Interop.RawRectangleF ToDirect2D(this Avalonia.Rect rect) { throw null; }
        public static SharpDX.Direct2D1.StrokeStyle ToDirect2DStrokeStyle(this Avalonia.Media.IPen pen, SharpDX.Direct2D1.Factory factory) { throw null; }
        public static SharpDX.Direct2D1.StrokeStyle ToDirect2DStrokeStyle(this Avalonia.Media.IPen pen, SharpDX.Direct2D1.RenderTarget renderTarget) { throw null; }
        public static SharpDX.Mathematics.Interop.RawVector2 ToSharpDX(this Avalonia.Point p) { throw null; }
        public static SharpDX.Mathematics.Interop.RawRectangleF ToSharpDX(this Avalonia.Rect r) { throw null; }
        public static SharpDX.Size2F ToSharpDX(this Avalonia.Size p) { throw null; }
        public static System.Guid ToWic(this Avalonia.Platform.PixelFormat format, Avalonia.Platform.AlphaFormat alphaFormat) { throw null; }
    }
    public partial class RenderTarget : Avalonia.Direct2D1.ILayerFactory, Avalonia.Platform.IRenderTarget, System.IDisposable
    {
        public RenderTarget(SharpDX.Direct2D1.RenderTarget renderTarget) { }
        public bool IsCorrupted { get { throw null; } }
        public Avalonia.Platform.IDrawingContextImpl CreateDrawingContext(Avalonia.Rendering.IVisualBrushRenderer visualBrushRenderer) { throw null; }
        public Avalonia.Platform.IDrawingContextLayerImpl CreateLayer(Avalonia.Size size) { throw null; }
        public void Dispose() { }
    }
    public abstract partial class SwapChainRenderTarget : Avalonia.Direct2D1.ILayerFactory, Avalonia.Platform.IRenderTarget, System.IDisposable
    {
        protected SwapChainRenderTarget() { }
        public bool IsCorrupted { get { throw null; } }
        public Avalonia.Platform.IDrawingContextImpl CreateDrawingContext(Avalonia.Rendering.IVisualBrushRenderer visualBrushRenderer) { throw null; }
        public Avalonia.Platform.IDrawingContextLayerImpl CreateLayer(Avalonia.Size size) { throw null; }
        protected abstract SharpDX.DXGI.SwapChain1 CreateSwapChain(SharpDX.DXGI.Factory2 dxgiFactory, SharpDX.DXGI.SwapChainDescription1 swapChainDesc);
        public void Dispose() { }
        protected abstract SharpDX.Size2F GetWindowDpi();
        protected abstract SharpDX.Size2 GetWindowSize();
    }
}
namespace Avalonia.Direct2D1.Media
{
    [Avalonia.Metadata.UnstableAttribute]
    public abstract partial class BitmapImpl : Avalonia.Platform.IBitmapImpl, System.IDisposable
    {
        protected BitmapImpl() { }
        public abstract Avalonia.Vector Dpi { get; }
        public abstract Avalonia.PixelSize PixelSize { get; }
        public int Version { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] protected set { } }
        public virtual void Dispose() { }
        public abstract Avalonia.Direct2D1.OptionalDispose<SharpDX.Direct2D1.Bitmap> GetDirect2DBitmap(SharpDX.Direct2D1.RenderTarget target);
        public abstract void Save(System.IO.Stream stream, int? quality = default(int?));
        public void Save(string fileName, int? quality = default(int?)) { }
    }
    [Avalonia.Metadata.UnstableAttribute]
    public abstract partial class BrushImpl : System.IDisposable
    {
        protected BrushImpl() { }
        public SharpDX.Direct2D1.Brush PlatformBrush { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public virtual void Dispose() { }
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial class D2DBitmapImpl : Avalonia.Direct2D1.Media.BitmapImpl
    {
        public D2DBitmapImpl(SharpDX.Direct2D1.Bitmap d2DBitmap) { }
        public override Avalonia.Vector Dpi { get { throw null; } }
        public override Avalonia.PixelSize PixelSize { get { throw null; } }
        public override void Dispose() { }
        public override Avalonia.Direct2D1.OptionalDispose<SharpDX.Direct2D1.Bitmap> GetDirect2DBitmap(SharpDX.Direct2D1.RenderTarget target) { throw null; }
        public override void Save(System.IO.Stream stream, int? quality = default(int?)) { }
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial class DrawingContextImpl : Avalonia.Platform.IDrawingContextImpl, System.IDisposable
    {
        public DrawingContextImpl(Avalonia.Rendering.IVisualBrushRenderer visualBrushRenderer, Avalonia.Direct2D1.ILayerFactory layerFactory, SharpDX.Direct2D1.RenderTarget renderTarget, SharpDX.DXGI.SwapChain1 swapChain = null, System.Action finishedCallback = null) { }
        public Avalonia.Matrix Transform { get { throw null; } set { } }
        public System.Numerics.Matrix4x4 Transform4x4 { get { throw null; } set { } }
        public void Clear(Avalonia.Media.Color color) { }
        public Avalonia.Direct2D1.Media.BrushImpl CreateBrush(Avalonia.Media.IBrush brush, Avalonia.Size destinationSize) { throw null; }
        public Avalonia.Platform.IDrawingContextLayerImpl CreateLayer(Avalonia.Size size) { throw null; }
        public void Custom(Avalonia.Rendering.SceneGraph.ICustomDrawOperation custom) { }
        public void Dispose() { }
        public void DrawBitmap(Avalonia.Utilities.IRef<Avalonia.Platform.IBitmapImpl> source, Avalonia.Media.IBrush opacityMask, Avalonia.Rect opacityMaskRect, Avalonia.Rect destRect) { }
        public void DrawBitmap(Avalonia.Utilities.IRef<Avalonia.Platform.IBitmapImpl> source, double opacity, Avalonia.Rect sourceRect, Avalonia.Rect destRect, Avalonia.Media.Imaging.BitmapInterpolationMode bitmapInterpolationMode) { }
        public void DrawEllipse(Avalonia.Media.IBrush brush, Avalonia.Media.IPen pen, Avalonia.Rect rect) { }
        public void DrawGeometry(Avalonia.Media.IBrush brush, Avalonia.Media.IPen pen, Avalonia.Platform.IGeometryImpl geometry) { }
        public void DrawGlyphRun(Avalonia.Media.IBrush foreground, Avalonia.Utilities.IRef<Avalonia.Platform.IGlyphRunImpl> glyphRun) { }
        public void DrawLine(Avalonia.Media.IPen pen, Avalonia.Point p1, Avalonia.Point p2) { }
        public void DrawRectangle(Avalonia.Media.IBrush brush, Avalonia.Media.IPen pen, Avalonia.RoundedRect rrect, Avalonia.Media.BoxShadows boxShadow = default(Avalonia.Media.BoxShadows)) { }
        public static SharpDX.Direct2D1.CompositeMode GetCompositeMode(Avalonia.Media.Imaging.BitmapBlendingMode blendingMode) { throw null; }
        public object GetFeature(System.Type t) { throw null; }
        public void PopBitmapBlendMode() { }
        public void PopClip() { }
        public void PopGeometryClip() { }
        public void PopOpacity() { }
        public void PopOpacityMask() { }
        public void PushBitmapBlendMode(Avalonia.Media.Imaging.BitmapBlendingMode blendingMode) { }
        public void PushClip(Avalonia.Rect clip) { }
        public void PushClip(Avalonia.RoundedRect clip) { }
        public void PushGeometryClip(Avalonia.Platform.IGeometryImpl clip) { }
        public void PushOpacity(double opacity) { }
        public void PushOpacityMask(Avalonia.Media.IBrush mask, Avalonia.Rect bounds) { }
    }
    public partial class DWriteResourceFontFileEnumerator : SharpDX.CallbackBase, SharpDX.DirectWrite.FontFileEnumerator, SharpDX.ICallbackable, System.IDisposable
    {
        public DWriteResourceFontFileEnumerator(SharpDX.DirectWrite.Factory factory, SharpDX.DirectWrite.FontFileLoader loader, SharpDX.DataPointer key) { }
        SharpDX.DirectWrite.FontFile SharpDX.DirectWrite.FontFileEnumerator.CurrentFontFile { get { throw null; } }
        bool SharpDX.DirectWrite.FontFileEnumerator.MoveNext() { throw null; }
    }
    public partial class DWriteResourceFontFileStream : SharpDX.CallbackBase, SharpDX.DirectWrite.FontFileStream, SharpDX.ICallbackable, System.IDisposable
    {
        public DWriteResourceFontFileStream(SharpDX.DataStream stream) { }
        long SharpDX.DirectWrite.FontFileStream.GetFileSize() { throw null; }
        long SharpDX.DirectWrite.FontFileStream.GetLastWriteTime() { throw null; }
        void SharpDX.DirectWrite.FontFileStream.ReadFileFragment(out System.IntPtr fragmentStart, long fileOffset, long fragmentSize, out System.IntPtr fragmentContext) { throw null; }
        void SharpDX.DirectWrite.FontFileStream.ReleaseFileFragment(System.IntPtr fragmentContext) { }
    }
    [Avalonia.Metadata.UnstableAttribute]
    public abstract partial class GeometryImpl : Avalonia.Platform.IGeometryImpl
    {
        public GeometryImpl(SharpDX.Direct2D1.Geometry geometry) { }
        public Avalonia.Rect Bounds { get { throw null; } }
        public double ContourLength { get { throw null; } }
        public SharpDX.Direct2D1.Geometry Geometry { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public bool FillContains(Avalonia.Point point) { throw null; }
        public Avalonia.Rect GetRenderBounds(Avalonia.Media.IPen pen) { throw null; }
        protected virtual SharpDX.Direct2D1.Geometry GetSourceGeometry() { throw null; }
        public Avalonia.Platform.IGeometryImpl Intersect(Avalonia.Platform.IGeometryImpl geometry) { throw null; }
        public bool StrokeContains(Avalonia.Media.IPen pen, Avalonia.Point point) { throw null; }
        public bool TryGetPointAndTangentAtDistance(double distance, out Avalonia.Point point, out Avalonia.Point tangent) { throw null; }
        public bool TryGetPointAtDistance(double distance, out Avalonia.Point point) { throw null; }
        public bool TryGetSegment(double startDistance, double stopDistance, bool startOnBeginFigure, out Avalonia.Platform.IGeometryImpl segmentGeometry) { throw null; }
        public Avalonia.Platform.ITransformedGeometryImpl WithTransform(Avalonia.Matrix transform) { throw null; }
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial class GlyphTypefaceImpl : Avalonia.Media.IGlyphTypeface, System.IDisposable
    {
        public GlyphTypefaceImpl(Avalonia.Media.Typeface typeface) { }
        public SharpDX.DirectWrite.Font DWFont { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public HarfBuzzSharp.Face Face { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public HarfBuzzSharp.Font Font { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public SharpDX.DirectWrite.FontFace1 FontFace { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Media.FontSimulations FontSimulations { get { throw null; } }
        public int GlyphCount { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Media.FontMetrics Metrics { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public void Dispose() { }
        public ushort GetGlyph(uint codepoint) { throw null; }
        public int GetGlyphAdvance(ushort glyph) { throw null; }
        public int[] GetGlyphAdvances(System.ReadOnlySpan<ushort> glyphs) { throw null; }
        public ushort[] GetGlyphs(System.ReadOnlySpan<uint> codepoints) { throw null; }
        public bool TryGetGlyph(uint codepoint, out ushort glyph) { throw null; }
        public bool TryGetGlyphMetrics(ushort glyph, out Avalonia.Media.GlyphMetrics metrics) { throw null; }
        public bool TryGetTable(uint tag, out byte[] table) { throw null; }
    }
    [Avalonia.Metadata.UnstableAttribute]
    public sealed partial class ImageBrushImpl : Avalonia.Direct2D1.Media.BrushImpl
    {
        public ImageBrushImpl(Avalonia.Media.ITileBrush brush, SharpDX.Direct2D1.RenderTarget target, Avalonia.Direct2D1.Media.BitmapImpl bitmap, Avalonia.Size targetSize) { }
        public override void Dispose() { }
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial class LinearGradientBrushImpl : Avalonia.Direct2D1.Media.BrushImpl
    {
        public LinearGradientBrushImpl(Avalonia.Media.ILinearGradientBrush brush, SharpDX.Direct2D1.RenderTarget target, Avalonia.Size destinationSize) { }
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial class RadialGradientBrushImpl : Avalonia.Direct2D1.Media.BrushImpl
    {
        public RadialGradientBrushImpl(Avalonia.Media.IRadialGradientBrush brush, SharpDX.Direct2D1.RenderTarget target, Avalonia.Size destinationSize) { }
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial class SolidColorBrushImpl : Avalonia.Direct2D1.Media.BrushImpl
    {
        public SolidColorBrushImpl(Avalonia.Media.IConicGradientBrush brush, SharpDX.Direct2D1.DeviceContext target) { }
        public SolidColorBrushImpl(Avalonia.Media.ISolidColorBrush brush, SharpDX.Direct2D1.RenderTarget target) { }
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial class StreamGeometryContextImpl : Avalonia.Platform.IGeometryContext, Avalonia.Platform.IStreamGeometryContextImpl, System.IDisposable
    {
        public StreamGeometryContextImpl(SharpDX.Direct2D1.GeometrySink sink) { }
        public void ArcTo(Avalonia.Point point, Avalonia.Size size, double rotationAngle, bool isLargeArc, Avalonia.Media.SweepDirection sweepDirection) { }
        public void BeginFigure(Avalonia.Point startPoint, bool isFilled) { }
        public void CubicBezierTo(Avalonia.Point point1, Avalonia.Point point2, Avalonia.Point point3) { }
        public void Dispose() { }
        public void EndFigure(bool isClosed) { }
        public void LineTo(Avalonia.Point point) { }
        public void QuadraticBezierTo(Avalonia.Point control, Avalonia.Point dest) { }
        public void SetFillRule(Avalonia.Media.FillRule fillRule) { }
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial class StreamGeometryImpl : Avalonia.Direct2D1.Media.GeometryImpl, Avalonia.Platform.IGeometryImpl, Avalonia.Platform.IStreamGeometryImpl
    {
        public StreamGeometryImpl() : base (default(SharpDX.Direct2D1.Geometry)) { }
        public StreamGeometryImpl(SharpDX.Direct2D1.PathGeometry geometry) : base (default(SharpDX.Direct2D1.Geometry)) { }
        public Avalonia.Platform.IStreamGeometryImpl Clone() { throw null; }
        public Avalonia.Platform.IStreamGeometryContextImpl Open() { throw null; }
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial class TransformedGeometryImpl : Avalonia.Direct2D1.Media.GeometryImpl, Avalonia.Platform.IGeometryImpl, Avalonia.Platform.ITransformedGeometryImpl
    {
        public TransformedGeometryImpl(SharpDX.Direct2D1.TransformedGeometry geometry, Avalonia.Direct2D1.Media.GeometryImpl source) : base (default(SharpDX.Direct2D1.Geometry)) { }
        public Avalonia.Platform.IGeometryImpl SourceGeometry { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Matrix Transform { get { throw null; } }
        protected override SharpDX.Direct2D1.Geometry GetSourceGeometry() { throw null; }
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial class WicBitmapImpl : Avalonia.Direct2D1.Media.BitmapImpl, Avalonia.Platform.IReadableBitmapImpl
    {
        public WicBitmapImpl(Avalonia.PixelSize size, Avalonia.Vector dpi, Avalonia.Platform.PixelFormat? pixelFormat = default(Avalonia.Platform.PixelFormat?), Avalonia.Platform.AlphaFormat? alphaFormat = default(Avalonia.Platform.AlphaFormat?)) { }
        public WicBitmapImpl(Avalonia.Platform.PixelFormat format, Avalonia.Platform.AlphaFormat alphaFormat, System.IntPtr data, Avalonia.PixelSize size, Avalonia.Vector dpi, int stride) { }
        public WicBitmapImpl(System.IO.Stream stream) { }
        public WicBitmapImpl(System.IO.Stream stream, int decodeSize, bool horizontal, Avalonia.Media.Imaging.BitmapInterpolationMode interpolationMode) { }
        public WicBitmapImpl(string fileName) { }
        Avalonia.Platform.PixelFormat? Avalonia.Platform.IReadableBitmapImpl.Format { get { throw null; } }
        public override Avalonia.Vector Dpi { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        protected Avalonia.Platform.PixelFormat? PixelFormat { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public override Avalonia.PixelSize PixelSize { get { throw null; } }
        public SharpDX.WIC.Bitmap WicImpl { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public override void Dispose() { }
        public override Avalonia.Direct2D1.OptionalDispose<SharpDX.Direct2D1.Bitmap> GetDirect2DBitmap(SharpDX.Direct2D1.RenderTarget renderTarget) { throw null; }
        public Avalonia.Platform.ILockedFramebuffer Lock() { throw null; }
        public override void Save(System.IO.Stream stream, int? quality = default(int?)) { }
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial class WicRenderTargetBitmapImpl : Avalonia.Direct2D1.Media.WicBitmapImpl, Avalonia.Platform.IBitmapImpl, Avalonia.Platform.IDrawingContextLayerImpl, Avalonia.Platform.IRenderTarget, Avalonia.Platform.IRenderTargetBitmapImpl, System.IDisposable
    {
        public WicRenderTargetBitmapImpl(Avalonia.PixelSize size, Avalonia.Vector dpi, Avalonia.Platform.PixelFormat? pixelFormat = default(Avalonia.Platform.PixelFormat?)) : base (default(string)) { }
        public bool CanBlit { get { throw null; } }
        public bool IsCorrupted { get { throw null; } }
        public void Blit(Avalonia.Platform.IDrawingContextImpl context) { }
        public virtual Avalonia.Platform.IDrawingContextImpl CreateDrawingContext(Avalonia.Rendering.IVisualBrushRenderer visualBrushRenderer) { throw null; }
        public Avalonia.Platform.IDrawingContextImpl CreateDrawingContext(Avalonia.Rendering.IVisualBrushRenderer visualBrushRenderer, System.Action finishedCallback) { throw null; }
        public override void Dispose() { }
    }
}
namespace Avalonia.Direct2D1.Media.Imaging
{
    [Avalonia.Metadata.UnstableAttribute]
    public partial class D2DRenderTargetBitmapImpl : Avalonia.Direct2D1.Media.D2DBitmapImpl, Avalonia.Direct2D1.ILayerFactory, Avalonia.Platform.IBitmapImpl, Avalonia.Platform.IDrawingContextLayerImpl, Avalonia.Platform.IRenderTarget, Avalonia.Platform.IRenderTargetBitmapImpl, System.IDisposable
    {
        public D2DRenderTargetBitmapImpl(SharpDX.Direct2D1.BitmapRenderTarget renderTarget) : base (default(SharpDX.Direct2D1.Bitmap)) { }
        public bool CanBlit { get { throw null; } }
        public bool IsCorrupted { get { throw null; } }
        public void Blit(Avalonia.Platform.IDrawingContextImpl context) { }
        public static Avalonia.Direct2D1.Media.Imaging.D2DRenderTargetBitmapImpl CreateCompatible(SharpDX.Direct2D1.RenderTarget renderTarget, Avalonia.Size size) { throw null; }
        public Avalonia.Platform.IDrawingContextImpl CreateDrawingContext(Avalonia.Rendering.IVisualBrushRenderer visualBrushRenderer) { throw null; }
        public Avalonia.Platform.IDrawingContextLayerImpl CreateLayer(Avalonia.Size size) { throw null; }
        public override void Dispose() { }
        public override Avalonia.Direct2D1.OptionalDispose<SharpDX.Direct2D1.Bitmap> GetDirect2DBitmap(SharpDX.Direct2D1.RenderTarget target) { throw null; }
        public override void Save(System.IO.Stream stream, int? quality = default(int?)) { }
    }
}
